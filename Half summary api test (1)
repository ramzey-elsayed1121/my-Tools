في اخنبار api   يجب مراعت وملاحظه الاتي


قد تدعم نقطة نهاية واجهة برمجة التطبيقات طرق HTTP مختلفة. لذلك من المهم اختبار جميع الطرق المحتملة عند التحقيق في نقاط نهاية واجهة برمجة التطبيقات. قد يمكّنك هذا من تحديد وظائف نقطة نهاية إضافية، مما يفتح المزيد من سطح الهجوم.

على سبيل المثال، قد تدعم نقطة النهاية /api/tasks الطرق التالية:

GET /api/tasks - استرداد قائمة بالمهام.
POST /api/tasks - إنشاء مهمة جديدة.
DELETE /api/tasks/1 - حذف مهمة.


اكتشاف وثائق واجهة برمجة التطبيقات

حتى إذا لم تكن وثائق واجهة برمجة التطبيقات متاحة علنًا، فقد تتمكن من الوصول إليها من خلال تصفح التطبيقات التي تستخدم واجهة برمجة التطبيقات.

للقيام بذلك، يمكنك استخدام Burp Scanner لفحص واجهة برمجة التطبيقات. يمكنك أيضًا تصفح التطبيقات يدويًا باستخدام متصفح Burp. ابحث عن نقاط النهاية التي قد تشير إلى وثائق واجهة برمجة التطبيقات، على سبيل المثال:

/api
/swagger/index.html
/openapi.json

إذا حددت نقطة نهاية لمورد، فتأكد من التحقق من المسار الأساسي. على سبيل المثال، إذا حددت نقطة نهاية المورد /api/swagger/v1/users/123، فيجب عليك التحقق من المسارات التالية:

/api/swagger/v1
/api/swagger
/api

يمكنك أيضًا استخدام قائمة بالمسارات الشائعة للعثور على الوثائق باستخدام Intruder

توثيق واجهة برمجة التطبيقات

عادةً ما يتم توثيق واجهات برمجة التطبيقات حتى يعرف المطورون كيفية استخدامها والتكامل معها.

يمكن أن تكون الوثائق في أشكال يمكن قراءتها بواسطة البشر أو بواسطة الآلات. تم تصميم الوثائق التي يمكن قراءتها بواسطة البشر لتمكين المطورين من فهم كيفية استخدام واجهة برمجة التطبيقات. وقد تتضمن تفسيرات مفصلة وأمثلة وسيناريوهات استخدام. تم تصميم الوثائق التي يمكن قراءتها بواسطة الآلات لمعالجتها بواسطة البرامج لأتمتة المهام مثل تكامل واجهة برمجة التطبيقات والتحقق منها. وهي مكتوبة بتنسيقات منظمة مثل JSON أو XML.

غالبًا ما تكون وثائق واجهة برمجة التطبيقات متاحة للجمهور، خاصةً إذا كانت واجهة برمجة التطبيقات مخصصة للاستخدام من قبل مطورين خارجيين. إذا كانت هذه هي الحالة، فابدأ دائمًا في إعادة النظر من خلال مراجعة الوثائق.
تحديد أنواع المحتوى المدعومة

غالبًا ما تتوقع نقاط نهاية واجهة برمجة التطبيقات بيانات بتنسيق معين. وبالتالي، قد تتصرف بشكل مختلف وفقًا لنوع محتوى البيانات المقدمة في الطلب. قد يمكّنك تغيير نوع المحتوى من:

تشغيل الأخطاء التي تكشف عن معلومات مفيدة.
تجاوز الدفاعات المعيبة.
الاستفادة من الاختلافات في منطق المعالجة. على سبيل المثال، قد تكون واجهة برمجة التطبيقات آمنة عند التعامل مع بيانات JSON ولكنها عرضة لهجمات الحقن عند التعامل مع XML.

لتغيير نوع المحتوى، عدّل رأس Content-Type، ثم أعد تنسيق نص الطلب وفقًا لذلك. يمكنك استخدام Content type converter BApp لتحويل البيانات المرسلة تلقائيًا ضمن الطلبات بين XML وJSON. 

1- GET
تستخدم في استردات المعلومات او استردات اشياء 

2- PATCH 
تستخدم في تغير جزئ  مثال اذا كنت تعمل علي اختبار api شراء منتج فهو يقوم بعمل تغير في السعر المنتج ويجب ان تلاحظ وتراعي انه يقوم بتغيره ايضا في الموقع مما يعني انه سعره سيبقي مثل ما قومت بتغيره فيجب الابلاغ الفوري عنه 
3- OPTIONS
تخبرك ما هو الطلابات الذي يمكن ارسالها 
4- PUT

تستخدم لتحديث المعلومات 

تحديد المعلمات المخفية

نظرًا لأن التعيين الشامل ينشئ معلمات من حقول الكائنات، فيمكنك غالبًا تحديد هذه المعلمات المخفية عن طريق فحص الكائنات التي تم إرجاعها بواسطة واجهة برمجة التطبيقات يدويًا.

على سبيل المثال، ضع في اعتبارك طلب PATCH /api/users/، والذي يمكّن المستخدمين من تحديث اسم المستخدم والبريد الإلكتروني، ويتضمن JSON التالي:

{
"username": "wiener",
"email": "wiener@example.com",
}

يعيد طلب GET /api/users/123 المتزامن JSON التالي:
{
"id": 123,
"name": "John Doe",
"email": "john@example.com",
"isAdmin": "false"
}

قد يشير هذا إلى أن معلمات id وisAdmin المخفية مرتبطة بكائن المستخدم الداخلي، إلى جانب معلمات اسم المستخدم والبريد الإلكتروني المحدثة.


