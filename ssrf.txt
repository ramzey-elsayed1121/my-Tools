ما هو SSRF؟

تزوير الطلبات من جانب الخادم هو ثغرة أمنية في الويب تسمح للمهاجم بالتسبب في قيام تطبيق جانب الخادم بإرسال طلبات إلى موقع غير مقصود.

في هجوم SSRF النموذجي، قد يتسبب المهاجم في قيام الخادم بإنشاء اتصال بخدمات داخلية فقط ضمن البنية الأساسية للمؤسسة. في حالات أخرى، قد يتمكن المهاجم من إجبار الخادم على الاتصال بأنظمة خارجية عشوائية. قد يؤدي هذا إلى تسريب بيانات حساسة، مثل بيانات اعتماد التفويض.

ما هو تأثير هجمات SSRF؟

غالبًا ما يؤدي هجوم SSRF الناجح إلى إجراءات غير مصرح بها أو الوصول إلى البيانات داخل المؤسسة. يمكن أن يكون ذلك في التطبيق المعرض للخطر، أو في أنظمة خلفية أخرى يمكن للتطبيق التواصل معها. في بعض المواقف، قد تسمح ثغرة SSRF للمهاجم بتنفيذ أوامر عشوائية.

قد يؤدي استغلال SSRF الذي يتسبب في اتصالات بأنظمة خارجية تابعة لجهات خارجية إلى هجمات ضارة. قد يبدو أن هذه الهجمات تنشأ من المؤسسة التي تستضيف التطبيق المعرض للخطر.

هجمات SSRF الشائعة

غالبًا ما تستغل هجمات SSRF علاقات الثقة لتصعيد الهجوم من التطبيق المعرض للخطر وتنفيذ إجراءات غير مصرح بها. قد توجد علاقات الثقة هذه فيما يتعلق بالخادم، أو فيما يتعلق بأنظمة خلفية أخرى داخل نفس المؤسسة.

هجمات SSRF ضد الخادم

في هجوم SSRF ضد الخادم، يتسبب المهاجم في قيام التطبيق بإرسال طلب HTTP إلى الخادم الذي يستضيف التطبيق، عبر واجهة الشبكة loopback الخاصة به. يتضمن هذا عادةً توفير عنوان URL باسم مضيف مثل 127.0.0.1 (عنوان IP محجوز يشير إلى محول loopback) أو localhost (اسم مستخدم بشكل شائع لنفس المحول).

على سبيل المثال، تخيل تطبيق تسوق يتيح للمستخدم عرض ما إذا كان أحد العناصر متوفرًا في متجر معين. لتوفير معلومات المخزون، يجب على التطبيق الاستعلام عن واجهات برمجة تطبيقات REST الخلفية المختلفة. ويفعل ذلك عن طريق تمرير عنوان URL إلى نقطة نهاية واجهة برمجة التطبيقات الخلفية ذات الصلة عبر طلب HTTP في الواجهة الأمامية. عندما يشاهد المستخدم حالة المخزون لعنصر ما، يقوم متصفحه بإجراء الطلب التالي:

POST /product/stock HTTP/1.0
Content-Type: application/x-www-form-urlencoded
Content-Length: 118

stockApi=http://stock.weliketoshop.net:8080/product/stock/check%3FproductId%3D6%26storeId%3D1

يؤدي هذا إلى دفع الخادم إلى إرسال طلب إلى عنوان URL المحدد، واسترداد حالة المخزون، وإعادته إلى المستخدم.

في هذا المثال، يمكن للمهاجم تعديل الطلب لتحديد عنوان URL محلي للخادم:
POST /product/stock HTTP/1.0
Content-Type: application/x-www-form-urlencoded
Content-Length: 118

stockApi=http://localhost/admin
يقوم الخادم بجلب محتويات عنوان URL الخاص بـ /admin وإعادته إلى المستخدم.

يمكن للمهاجم زيارة عنوان URL الخاص بـ /admin، ولكن الوظيفة الإدارية لا يمكن الوصول إليها عادةً إلا من قبل المستخدمين المعتمدين. وهذا يعني أن المهاجم لن يرى أي شيء مثير للاهتمام. ومع ذلك، إذا جاء الطلب إلى عنوان URL الخاص بـ /admin من الجهاز المحلي، فسيتم تجاوز عناصر التحكم في الوصول العادية. يمنح التطبيق الوصول الكامل إلى الوظيفة الإدارية، لأن الطلب يبدو وكأنه صادر من موقع موثوق.
هجمات SSRF ضد الخادم - استمرار

لماذا تتصرف التطبيقات بهذه الطريقة، وتثق ضمناً في الطلبات التي تأتي من الجهاز المحلي؟ يمكن أن ينشأ هذا لأسباب مختلفة:

قد يتم تنفيذ فحص التحكم في الوصول في مكون مختلف يقع أمام خادم التطبيق. عند إعادة الاتصال بالخادم، يتم تجاوز الفحص.
لأغراض استرداد الكوارث، قد يسمح التطبيق بالوصول الإداري دون تسجيل الدخول، لأي مستخدم قادم من الجهاز المحلي. يوفر هذا طريقة للمسؤول لاستعادة النظام إذا فقد بيانات اعتماده. يفترض هذا أن المستخدم الموثوق به بالكامل فقط سيأتي مباشرة من الخادم.
قد تستمع واجهة الإدارة على رقم منفذ مختلف للتطبيق الرئيسي، وقد لا يتمكن المستخدمون من الوصول إليها مباشرة.

غالبًا ما تجعل علاقات الثقة هذه، حيث يتم التعامل مع الطلبات الصادرة من الجهاز المحلي بشكل مختلف عن الطلبات العادية، SSRF نقطة ضعف حرجة.

paylod :http://localhost/admin

هجمات SSRF ضد أنظمة خلفية أخرى

في بعض الحالات، يكون خادم التطبيق قادرًا على التفاعل مع أنظمة خلفية لا يمكن للمستخدمين الوصول إليها بشكل مباشر. غالبًا ما تحتوي هذه الأنظمة على عناوين IP خاصة غير قابلة للتوجيه. عادةً ما تكون أنظمة الخلفية محمية بواسطة طوبولوجيا الشبكة، لذا غالبًا ما يكون لديها وضع أمني أضعف. في العديد من الحالات، تحتوي أنظمة الخلفية الداخلية على وظائف حساسة يمكن الوصول إليها دون مصادقة من قبل أي شخص قادر على التفاعل مع الأنظمة.

في المثال السابق، تخيل وجود واجهة إدارية في عنوان URL الخلفي https://192.168.0.68/admin. يمكن للمهاجم إرسال الطلب التالي لاستغلال ثغرة SSRF والوصول إلى واجهة الإدارة:

POST /product/stock HTTP/1.0
Content-Type: application/x-www-form-urlencoded
Content-Length: 118

stockApi=http://192.168.0.68/admin


لمعرفت الاي بي الخاص بي الادمن بانل ممكن ان تستخدم الانترودر
مثال
192.168.0.X

192.168.0.30:8080

التحايل على دفاعات SSRF الشائعة

من الشائع أن نرى تطبيقات تحتوي على سلوك SSRF جنبًا إلى جنب مع دفاعات تهدف إلى منع الاستغلال الخبيث. وغالبًا ما يمكن التحايل على هذه الدفاعات.

SSRF مع مرشحات الإدخال المستندة إلى القائمة السوداء

تحظر بعض التطبيقات الإدخال الذي يحتوي على أسماء مضيفين مثل 127.0.0.1 وlocalhost، أو عناوين URL الحساسة مثل /admin. في هذه الحالة، يمكنك غالبًا التحايل على المرشح باستخدام الأساليب التالية:

استخدم تمثيل IP بديل لـ 127.0.0.1، مثل 2130706433 أو 017700000001 أو 127.1.
سجل اسم نطاقك الخاص الذي يحل محل 127.0.0.1. يمكنك استخدام spoofed.burpcollaborator.net لهذا الغرض.
قم بتعتيم السلاسل المحظورة باستخدام ترميز URL أو اختلاف الحالة.
قم بتوفير عنوان URL تتحكم فيه، والذي يعيد التوجيه إلى عنوان URL المستهدف. حاول استخدام أكواد إعادة توجيه مختلفة، بالإضافة إلى بروتوكولات مختلفة لعنوان URL المستهدف. على سبيل المثال، ثبت أن التبديل من عنوان URL http: إلى https: أثناء إعادة التوجيه يتجاوز بعض مرشحات مكافحة SSRF.
او قم بتحوييل ip الي ديسميل 
او http://127.1
لتخطي قم بتحويل الادمن بانل شفره مرتين 

SSRF مع مرشحات الإدخال المستندة إلى القائمة البيضاء

تسمح بعض التطبيقات فقط بإدخالات مطابقة، وهي قائمة بيضاء للقيم المسموح بها. قد يبحث المرشح عن تطابق في بداية الإدخال، أو موجود بداخله. قد تتمكن من تجاوز هذا المرشح من خلال استغلال التناقضات في تحليل عنوان URL.

تحتوي مواصفات عنوان URL على عدد من الميزات التي من المحتمل أن يتم تجاهلها عندما تنفذ عناوين URL التحليل والتحقق المؤقت باستخدام هذه الطريقة:

يمكنك تضمين بيانات الاعتماد في عنوان URL قبل اسم المضيف، باستخدام حرف @. على سبيل المثال:
https://expected-host:fakepassword@evil-host

يمكنك استخدام حرف # للإشارة إلى جزء من عنوان URL. على سبيل المثال:
https://evil-host#expected-host

يمكنك الاستفادة من التسلسل الهرمي لتسمية DNS لوضع الإدخال المطلوب في اسم DNS مؤهل بالكامل تتحكم فيه. على سبيل المثال:
https://expected-host.evil-host
يمكنك ترميز الأحرف باستخدام عناوين URL لإرباك كود تحليل عناوين URL. وهذا مفيد بشكل خاص إذا كان الكود الذي ينفذ الفلتر يتعامل مع الأحرف المشفرة باستخدام عناوين URL بشكل مختلف عن الكود الذي ينفذ طلب HTTP الخلفي. يمكنك أيضًا تجربة ترميز الأحرف مرتين؛ حيث تقوم بعض الخوادم بفك ترميز عناوين URL بشكل متكرر للمدخلات التي تتلقاها، مما قد يؤدي إلى مزيد من التناقضات.
يمكنك استخدام مجموعات من هذه التقنيات معًا.


ربط بين ثغره الاوبن ري ديركت (اعاده التوجيه)

تجاوز مرشحات SSRF عبر إعادة التوجيه المفتوحة

من الممكن أحيانًا تجاوز الدفاعات القائمة على المرشحات من خلال استغلال ثغرة إعادة التوجيه المفتوحة.

في المثال السابق، تخيل أن عنوان URL الذي أرسله المستخدم تم التحقق من صحته بشكل صارم لمنع الاستغلال الخبيث لسلوك SSRF. ومع ذلك، يحتوي التطبيق الذي يُسمح بعناوين URL الخاصة به على ثغرة إعادة التوجيه المفتوحة. بشرط أن تدعم واجهة برمجة التطبيقات المستخدمة في إجراء طلب HTTP الخلفي عمليات إعادة التوجيه، يمكنك إنشاء عنوان URL يلبي المرشح ويؤدي إلى طلب إعادة التوجيه إلى الهدف الخلفي المطلوب.

على سبيل المثال، يحتوي التطبيق على ثغرة إعادة توجيه مفتوحة حيث يقوم عنوان URL التالي:
/product/nextProduct?currentProductId=6&path=http://evil-user.net

بإرجاع إعادة توجيه إلى:
http://evil-user.net

يمكنك الاستفادة من ثغرة إعادة التوجيه المفتوحة لتجاوز مرشح عنوان URL، واستغلال ثغرة SSRF على النحو التالي:
POST /product/stock HTTP/1.0
Content-Type: application/x-www-form-urlencoded
Content-Length: 118

stockApi=http://weliketoshop.net/product/nextProduct?currentProductId=6&path=http://192.168.0.68/admin

تعمل ثغرة SSRF هذه لأن التطبيق يتحقق أولاً من أن عنوان URL لـ stockAPI المقدم موجود على نطاق مسموح به، وهو كذلك. ثم يطلب التطبيق عنوان URL المقدم، مما يؤدي إلى تشغيل إعادة التوجيه المفتوحة. ويتبع إعادة التوجيه، ويقدم طلبًا إلى عنوان URL الداخلي الذي يختاره المهاجم.

قم بزيارة أحد المنتجات، وانقر فوق "التحقق من المخزون"، واعترض الطلب في Burp Suite، وأرسله إلى Burp Repeater.
حاول العبث بمعلمة stockApi ولاحظ أنه من غير الممكن جعل الخادم يصدر الطلب مباشرة إلى مضيف مختلف.
انقر فوق "المنتج التالي" ولاحظ أن معلمة path تم وضعها في رأس Location لاستجابة إعادة التوجيه، مما أدى إلى إعادة توجيه مفتوحة.

قم بإنشاء عنوان URL يستغل ثغرة إعادة التوجيه المفتوحة، ويعيد التوجيه إلى واجهة المسؤول، وأدخل هذا في معلمة stockApi على فاحص المخزون:
/product/nextProduct?path=http://192.168.0.12:8080/admin
لاحظ أن فاحص المخزون يتبع إعادة التوجيه ويعرض لك صفحة المسؤول.

عدّل المسار لحذف المستخدم المستهدف:
/product/nextProduct?path=http://192.168.0.12:8080/admin/delete?username=carlos


ثغرات SSRF العمياء

تحدث ثغرات SSRF العمياء إذا تمكنت من جعل أحد التطبيقات يصدر طلب HTTP خلفيًا إلى عنوان URL مقدم، ولكن الاستجابة من الطلب الخلفي لا يتم إرجاعها في استجابة الواجهة الأمامية للتطبيق.

من الصعب استغلال SSRF العمياء ولكنه يؤدي أحيانًا إلى تنفيذ التعليمات البرمجية عن بُعد بالكامل على الخادم أو مكونات الواجهة الخلفية الأخرى.

ما هو تأثير ثغرات SSRF العمياء؟

غالبًا ما يكون تأثير ثغرات SSRF العمياء أقل من ثغرات SSRF المستنيرة بالكامل نظرًا لطبيعتها أحادية الاتجاه. لا يمكن استغلالها بسهولة لاسترداد البيانات الحساسة من أنظمة الواجهة الخلفية، على الرغم من أنه في بعض المواقف يمكن استغلالها لتحقيق تنفيذ التعليمات البرمجية عن بُعد بالكامل.




كيفية العثور على ثغرات SSRF العمياء واستغلالها

إن الطريقة الأكثر موثوقية للكشف عن ثغرات SSRF العمياء هي استخدام تقنيات خارج النطاق (OAST). وهذا يتضمن محاولة تشغيل طلب HTTP إلى نظام خارجي تتحكم فيه، ومراقبة تفاعلات الشبكة مع هذا النظام.

إن الطريقة الأسهل والأكثر فعالية لاستخدام تقنيات خارج النطاق هي استخدام Burp Collaborator. يمكنك استخدام Burp Collaborator لإنشاء أسماء نطاقات فريدة، وإرسالها في حمولات إلى التطبيق، ومراقبة أي تفاعل مع هذه النطاقات. إذا تم ملاحظة طلب HTTP وارد قادم من التطبيق، فهذا يعني أنه معرض لخطر SSRF.

ملاحظة

من الشائع عند اختبار ثغرات SSRF ملاحظة بحث DNS عن نطاق Collaborator المقدم، ولكن لا يوجد طلب HTTP لاحق. يحدث هذا عادةً لأن التطبيق حاول تقديم طلب HTTP إلى النطاق، مما تسبب في البحث الأولي عن DNS، ولكن تم حظر طلب HTTP الفعلي بواسطة التصفية على مستوى الشبكة. من الشائع نسبيًا أن تسمح البنية التحتية بحركة مرور DNS الصادرة، نظرًا لأن ذلك ضروري للعديد من الأغراض، ولكنها تحظر اتصالات HTTP إلى وجهات غير متوقعة.


إن مجرد تحديد ثغرة SSRF العمياء التي يمكنها تشغيل طلبات HTTP خارج النطاق لا يوفر في حد ذاته طريقًا للاستغلال. نظرًا لأنه لا يمكنك عرض الاستجابة من الطلب الخلفي، فلا يمكن استخدام السلوك لاستكشاف المحتوى على الأنظمة التي يمكن لخادم التطبيق الوصول إليها. ومع ذلك، لا يزال من الممكن الاستفادة منه للبحث عن ثغرات أخرى على الخادم نفسه أو على أنظمة خلفية أخرى. يمكنك مسح مساحة عنوان IP الداخلية بشكل أعمى، وإرسال حمولات مصممة للكشف عن الثغرات المعروفة. إذا كانت هذه الحمولات تستخدم أيضًا تقنيات خارج النطاق العمياء، فقد تكتشف ثغرة خطيرة على خادم داخلي غير مُرقع.

هناك طريق آخر لاستغلال ثغرات SSRF العمياء وهو حث التطبيق على الاتصال بنظام تحت سيطرة المهاجم، وإعادة استجابات ضارة إلى عميل HTTP الذي يقوم بالاتصال. إذا تمكنت من استغلال ثغرة خطيرة في جانب العميل في تنفيذ HTTP الخاص بالخادم، فقد تتمكن من تحقيق تنفيذ التعليمات البرمجية عن بعد داخل البنية الأساسية للتطبيق.

العثور على سطح هجوم مخفي لثغرات SSRF

من السهل العثور على العديد من ثغرات تزوير الطلبات من جانب الخادم، لأن حركة المرور العادية للتطبيق تتضمن معلمات طلب تحتوي على عناوين URL كاملة. ومن الصعب تحديد أمثلة أخرى لـ SSRF.






